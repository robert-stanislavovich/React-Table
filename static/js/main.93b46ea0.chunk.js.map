{"version":3,"sources":["redux/items-reducer.js","components/Table.jsx","App.js","reportWebVitals.js","redux/redux-store.js","index.js","components/styles.module.css"],"names":["ADD_ITEM","ADD_ROW","UPDATE_NEW_ITEM_NAME","UPDATE_NEW_ITEM_COUNT","UPDATE_NEW_ITEM_PRICE","SET_TOTAL","DELETE_ROW","SET_EDIT_MODE","SET_EDIT_NAME","SAVE_EDIT_NAME","ADD_COUNT","DELETE_COUNT","EDIT_NAME","UPDATE_ROWS","UPDATE_TOTAL","SET_EDIT_MODE_ID","SET_EDIT_MODE_ID_PRICE","SAVE_EDIT_PRICE","SET_EDIT_MODE_PRICE","SET_LIST_PRICE_UP","SET_LIST_PRICE_DOWN","SET_LIST_DESC_UP","SET_LIST_DESC_DOWN","initialState","newItemName","newItemCount","newItemPrice","rows","createRow","rows2","id","name","count","price","total","editMode","editModeId","editModeName","editModeIdPrice","editModePrice","desc","priceRow","subtotal","items","map","reduce","sum","i","ccyFormat","num","toFixed","itemsReducer","state","action","invoiceSubtotal","type","newItem","length","text","parseInt","filter","item","last","reverse","mode","change","obj","changedRows","r","list","sort","a","b","localeCompare","useStyles","makeStyles","table","minWidth","compose","connect","itemsPage","newItemText","AddRowAction","updateNewName","updateNewCount","updateNewPrice","updateTotal","deleteRow","setEditMode","editName","SaveEditName","addCount","deleteCount","setEditModeName","updateRows","updateTotalCount","setEditModeId","setEditModeIdPrice","SaveEditPrice","setEditModePrice","setListPriceUp","setListPriceDown","setListDescUp","setListDescDown","props","classes","saveEditName","useEffect","onSubmitDesc","values","changeDesc","onSubmitPrice","changePrice","className","s","wrapper","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","class","onClick","align","TableBody","row","onSubmit","validate","errors","render","handleSubmit","submitting","form","pristine","input","meta","Inputs","placeholder","error","touched","changeButtons","disabled","title","floatingButtonRed","floatingButtonGreen","deleteButtonDiv","deleteButton","rowSpan","colSpan","constructor","username","password","confirm","isNaN","Button","reset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","module","exports"],"mappings":"iSAAMA,EAAW,WAEXC,EAAU,UACVC,EAAuB,uBACvBC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAAY,YACZC,EAAa,aACbC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAiB,iBACjBC,EAAY,YACZC,EAAe,eACfC,EAAY,YACZC,EAAc,cACdC,EAAe,eACfC,EAAmB,mBACnBC,EAAyB,yBACzBC,EAAkB,kBAClBC,EAAsB,sBACtBC,EAAoB,oBACpBC,EAAsB,sBACtBC,EAAmB,mBACnBC,EAAqB,qBAGvBC,EAAe,CAEfC,YAAa,mDACbC,aAAc,EACdC,aAAc,EACdC,KAAM,CACFC,EAAU,EAAG,yDAAa,EAAG,MAC7BA,EAAU,EAAG,yDAAa,EAAG,MAC7BA,EAAU,EAAG,qEAAe,EAAG,MAC/BA,EAAU,EAAG,6CAAW,EAAG,MAC3BA,EAAU,EAAG,6CAAW,EAAG,KAC3BA,EAAU,EAAG,mDAAY,EAAG,MAEhCC,MAAO,CACH,CAACC,GAAI,EAAGC,KAAM,yDAAaC,MAAO,EAAGC,MAAO,MAC5C,CAACH,GAAI,EAAGC,KAAM,yDAAaC,MAAO,EAAGC,MAAO,MAC5C,CAACH,GAAI,EAAGC,KAAM,qEAAeC,MAAO,EAAGC,MAAO,MAC9C,CAACH,GAAI,EAAGC,KAAM,6CAAWC,MAAO,EAAGC,MAAO,MAC1C,CAACH,GAAI,EAAGC,KAAM,6CAAWC,MAAO,GAAIC,MAAO,KAC3C,CAACH,GAAI,EAAGC,KAAM,mDAAYC,MAAO,EAAGC,MAAO,MAE/CC,MAAO,KACPC,UAAU,EACVC,YAAY,EACZL,KAAM,KACNM,cAAc,EACdC,iBAAiB,EACjBC,eAAe,GAUnB,SAASX,EAAUE,EAAIU,EAAMR,EAAOC,GAEhC,MAAO,CAACH,KAAIU,OAAMR,QAAOC,QAAOC,MAPpC,SAAkBF,EAAOC,GAErB,OAAOD,EAAQC,EAIDQ,CAAST,EAAOC,IAIlC,SAASS,EAASC,GACd,OAAOA,EAAMC,KAAI,qBAAEV,SAAkBW,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,IAAG,GAGrE,SAASC,EAAUC,GACf,MAAM,GAAN,OAAUA,EAAIC,QAAQ,IAI1B,IAqTeC,EArTM,WAAmC,IAAlCC,EAAiC,uDAAzB7B,EAAc8B,EAAW,uCAG7CC,EAAkBZ,EAASU,EAAMzB,MAEvC,OAAQ0B,EAAOE,MAGX,KAAKvD,EACD,IAAIwD,EAAU,CACV1B,GAAIsB,EAAMT,MAAMc,OAAS,EACzB1B,KAAMqB,EAAM5B,YACZQ,MAAO,EACPC,MAAO,GAEX,OAAO,2BACAmB,GADP,IAEIT,MAAM,GAAD,mBAAMS,EAAMT,OAAZ,CAAmBa,IACxBhC,YAAa,KAGrB,KAAKtB,EACD,OAAO,2BACAkD,GADP,IAEI5B,YAAa6B,EAAOK,OAG5B,KAAKvD,EACD,OAAO,2BACAiD,GADP,IAEI3B,aAAckC,SAASN,EAAOK,QAGtC,KAAKtD,EACD,OAAO,2BACAgD,GADP,IAEI1B,aAAciC,SAASN,EAAOK,QAGtC,KAAKrD,EACD,OAAO,2BACA+C,GADP,IAEIlB,MAAOc,EAAUM,KAGzB,KAAKhD,EAED,OAAO,2BACA8C,GADP,IAEIzB,KAAMyB,EAAMzB,KAAKiC,QAAO,SAAAC,GAAI,OAAIA,EAAK/B,KAAOuB,EAAOb,UAI3D,KAAKvC,EACD,IAAI6D,EAAO,WAGP,OAFcV,EAAMzB,KAAKoC,UACJ,GAAGjC,IAG5B,OAAO,2BACAsB,GADP,IAEIzB,KAAK,GAAD,mBAAMyB,EAAMzB,MAAZ,CAAkBC,EAAUkC,IAAS,EAAGV,EAAM5B,YAAa4B,EAAM3B,aAAc2B,EAAM1B,kBAGjG,KAAKnB,EACD,OAAO,2BACA6C,GADP,IAEIjB,SAAUkB,EAAOW,OAGzB,KAAK9C,EACD,OAAO,2BACAkC,GADP,IAEIb,cAAec,EAAOW,OAG9B,KAAKjD,EACD,OAAO,2BACAqC,GADP,IAEIhB,WAAYiB,EAAOvB,KAG3B,KAAKlB,EACD,OAAO,2BACAwC,GADP,IAEIf,aAAcgB,EAAOW,OAG7B,KAAKxD,EACD,OAAO,2BACA4C,GADP,IAEIrB,KAAMsB,EAAOtB,OAGrB,KAAKtB,EACD,IAAIwD,EAAS,SAACnC,EAAIU,GACd,OAAOY,EAAMzB,KAAKiB,KAAI,SAAAsB,GAClB,OAAIA,EAAIpC,KAAOA,EACJ,2BAAIoC,GAAX,IAAgBpC,KAAIU,SAEjB0B,MAGXC,EAAcF,EAAOZ,EAAOvB,GAAIuB,EAAOtB,MAC3C,OAAO,2BACAqB,GADP,IAEIzB,KAAMwC,IAGd,KAAKlD,EACD,IAAIgD,EAAS,SAACnC,EAAIG,GACd,OAAOmB,EAAMzB,KAAKiB,KAAI,SAAAsB,GAClB,OAAIA,EAAIpC,KAAOA,EACJ,2BAAIoC,GAAX,IAAgBpC,KAAIG,UAEjBiC,MAGXC,EAAcF,EAAOZ,EAAOvB,GAAIuB,EAAOpB,OAC3C,OAAO,2BACAmB,GADP,IAEIzB,KAAMwC,IAGd,KAAKzD,EAED,IAAIuD,EAAS,SAACnC,EAAIE,GACd,OAAOoB,EAAMzB,KAAKiB,KAAI,SAAAsB,GAElB,OAAIA,EAAIpC,KAAOA,EACJ,2BAAIoC,GAAX,IAAgBpC,KAAIE,UAEjBkC,MAGXC,EAAcF,EAAOZ,EAAOvB,GAAIuB,EAAOrB,OAC3C,OAAO,2BACAoB,GADP,IAEIzB,KAAMwC,IAGd,KAAKrD,EAED,IAAImD,EAAS,SAACnC,GACV,OAAOsB,EAAMzB,KAAKiB,KAAI,SAAAsB,GAClB,IAAIhC,EAAQgC,EAAIlC,MAAMkC,EAAIjC,MAC1B,OAAIiC,EAAIpC,KAAOA,EACJ,2BAAIoC,GAAX,IAAgBpC,KAAII,UAEjBgC,MAGXC,EAAcF,EAAOZ,EAAOvB,IAChC,OAAO,2BACAsB,GADP,IAEIzB,KAAMwC,IAId,KAAKxD,EACD,IAAIsD,EAAS,SAACnC,EAAIE,GACd,OAAOoB,EAAMzB,KAAKiB,KAAI,SAAAsB,GAClB,OAAIA,EAAIpC,KAAOA,EACJ,2BAAIoC,GAAX,IAAgBpC,KAAIE,UAEjBkC,MAGXC,EAAcF,EAAOZ,EAAOvB,GAAIuB,EAAOrB,OAC3C,OAAO,2BACAoB,GADP,IAEIzB,KAAMwC,IAGd,KAAKtD,EACD,OAAO,2BACAuC,GADP,IAEIzB,KAAMyB,EAAMzB,KAAKiB,KAAI,SAAAwB,GAAM,OAAOA,OAG1C,KAAKpD,EACD,OAAO,2BACAoC,GADP,IAEId,gBAAiBe,EAAOvB,KAGhC,KAAKX,EACD,IAAIkD,EAAO,WACP,OAAOjB,EAAMzB,KAAK2C,MAAK,SAAUC,EAAGC,GAChC,OAAID,EAAEtC,MAAQuC,EAAEvC,MACL,EAEPsC,EAAEtC,MAAQuC,EAAEvC,OACJ,EAGL,MAIf,OAAO,2BACAmB,GADP,IAEIzB,KAAM0C,MAId,KAAKjD,EACD,IAAIiD,EAAO,WACP,OAAOjB,EAAMzB,KAAK2C,MAAK,SAAUC,EAAGC,GAC5B,OAAID,EAAEtC,MAAQuC,EAAEvC,OACJ,EAERsC,EAAEtC,MAAQuC,EAAEvC,MACL,EAGJ,MAInB,OAAO,2BACAmB,GADP,IAEIzB,KAAM0C,MAId,KAAKhD,EACD,IAAIgD,EAAO,WACP,OAAOjB,EAAMzB,KAAK2C,MAAK,SAAUC,EAAGC,GAE5B,OAAOD,EAAE/B,KAAKiC,cAAcD,EAAEhC,UAI1C,OAAO,2BACAY,GADP,IAEIzB,KAAM0C,MAId,KAAK/C,EACD,IAAI+C,EAAO,WACP,OAAOjB,EAAMzB,KAAK2C,MAAK,SAAUC,EAAGC,GAE5B,OAAOA,EAAEhC,KAAKiC,cAAcF,EAAE/B,UAI1C,OAAO,2BACAY,GADP,IAEIzB,KAAM0C,MAMd,QACI,OAAOjB,I,uCC7SbsB,EAAYC,YAAW,CACzBC,MAAO,CACHC,SAAU,OAwVHC,cACXC,aAnBkB,SAAC3B,GAAD,MAAY,CAC9BT,MAAOS,EAAM4B,UAAUrC,MACvBsC,YAAa7B,EAAM4B,UAAUC,YAC7BtD,KAAMyB,EAAM4B,UAAUrD,KACtBE,MAAOuB,EAAM4B,UAAUnD,MACvBH,aAAc0B,EAAM4B,UAAUtD,aAC9BF,YAAa4B,EAAM4B,UAAUxD,YAC7BC,aAAc2B,EAAM4B,UAAUvD,aAC9BS,MAAOkB,EAAM4B,UAAU9C,MACvBC,SAAUiB,EAAM4B,UAAU7C,SAC1BJ,KAAMqB,EAAM4B,UAAUjD,KACtBM,aAAce,EAAM4B,UAAU3C,aAC9BD,WAAYgB,EAAM4B,UAAU5C,WAC5BE,gBAAiBc,EAAM4B,UAAU1C,gBACjCC,cAAea,EAAM4B,UAAUzC,iBAKN,CACrB2C,aDToB,SAAC1C,EAAMR,EAAOC,GAAd,MACvB,CAACsB,KAAMtD,EAASuC,OAAMR,QAAOC,UCQZkD,cDzCO,SAACzB,GAAD,MACxB,CAACH,KAAMrD,EAAsBwD,SCwCG0B,eDvCP,SAAC1B,GAAD,MACzB,CAACH,KAAMpD,EAAuBuD,SCuC3B2B,eDtCsB,SAAC3B,GAAD,MACzB,CAACH,KAAMnD,EAAuBsD,SCqCX4B,YDpCG,SAACpD,GAAD,MACtB,CAACqB,KAAMlD,EAAW6B,UCmCcqD,UDlCZ,SAAC/C,GAAD,MACpB,CAACe,KAAMjD,EAAYkC,SCiCwBgD,YDhCrB,SAACxB,GAAD,MACtB,CAACT,KAAMhD,EAAeyD,SC+BkCyB,SDtBrC,SAAC1D,GAAD,MACnB,CAACwB,KAAM/C,EAAeuB,SCqB4C2D,aDpB3C,SAAC5D,EAAIC,GAAL,MACvB,CAACwB,KAAM9C,EAAgBqB,KAAIC,SCmBqD4D,SDhB7D,SAAC7D,EAAIE,GAAL,MACnB,CAACuB,KAAM7C,EAAWoB,KAAIE,UCgBnB4D,YDbmB,SAAC9D,EAAIE,GAAL,MACtB,CAACuB,KAAM5C,EAAcmB,KAAIE,UCYT6D,gBDzBU,SAAC7B,GAAD,MAC1B,CAACT,KAAM3C,EAAWoD,SCwBe8B,WDTZ,iBACrB,CAACvC,KAAM1C,ICQsCkF,iBDflB,SAACjE,GAAD,MAC3B,CAACyB,KAAMzC,EAAcgB,OCc0CkE,cD7BvC,SAAClE,GAAD,MACxB,CAACyB,KAAMxC,EAAkBe,OC6BtBmE,mBD5B0B,SAACnE,GAAD,MAC7B,CAACyB,KAAMvC,EAAwBc,OC2BRoE,cDpBC,SAACpE,EAAIG,GAAL,MACxB,CAACsB,KAAMtC,EAAiBa,KAAIG,UCmBUkE,iBDhCX,SAACnC,GAAD,MAC3B,CAACT,KAAMrC,EAAqB8C,SC+B4BoC,eDR/B,iBACzB,CAAC7C,KAAMpC,ICQJkF,iBDPwB,iBAC3B,CAAC9C,KAAMnC,ICMckF,cDLG,iBACxB,CAAC/C,KAAMlC,ICI6BkF,gBDHV,iBAC1B,CAAChD,KAAMjC,MCJGwD,EAjVE,SAAC0B,GAGd,IAAMC,EAAU/B,IAqCZgC,EAAe,SAAC5E,EAAIC,GAChByE,EAAMrE,UACNqE,EAAMd,aAAa5D,EAAIC,IAM/B4E,qBAAU,WAENH,EAAMlB,iBAIV,IAMMsB,EAAe,SAACC,GAClBL,EAAMrB,cAAc0B,EAAOC,YAC3BJ,KAEGK,EAAgB,SAACF,GAChBL,EAAMnB,eAAewB,EAAOG,aAC5BN,KAKR,OAAQ,sBAAKO,UAAWC,IAAEC,QAAlB,UAGA,8BACA,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SAEI,eAACC,EAAA,EAAD,CAAON,UAAWR,EAAQ7B,MAAO4C,aAAW,iBAA5C,UACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,8FACA,eAACA,EAAA,EAAD,WAAW,wBAAQpE,KAAK,SAASqE,MAAM,mCAAmCC,QAAS,WAC/ErB,EAAMF,gBACNE,EAAMV,cAFC,4EAGa,wBAAQvC,KAAK,SAASqE,MAAM,mCAAmCC,QAAS,WAC5FrB,EAAMD,kBACNC,EAAMV,cAFc,+EAIxB,cAAC6B,EAAA,EAAD,IACA,eAACA,EAAA,EAAD,WAAW,wBAAQpE,KAAK,SAASqE,MAAM,mCAAmCC,QAAS,WAC/ErB,EAAMH,mBACNG,EAAMV,cAFC,wFAIP,wBAAQvC,KAAK,SAASqE,MAAM,mCAAmCC,QAAS,WACxErB,EAAMJ,iBACNI,EAAMV,cAFN,6GAIJ,cAAC6B,EAAA,EAAD,OAIJ,eAACD,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,+DACA,cAACA,EAAA,EAAD,CAAWG,MAAM,QAAjB,0EACA,cAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,gGACA,cAACH,EAAA,EAAD,CAAWG,MAAM,QAAjB,kDAGR,eAACC,EAAA,EAAD,WACKvB,EAAM7E,KAAKiB,KAAI,SAACoF,GAAD,OACZ,eAACN,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAYK,EAAIlG,KAChB,cAAC6F,EAAA,EAAD,UACwB,GAAlBnB,EAAMrE,UAAsBqE,EAAMpE,YAAc4F,EAAIlG,GAChD,cAAC,IAAD,CACEmG,SAAUrB,EACVsB,SAAU,SAAArB,GACN,IAAMsB,EAAS,GAIf,OAHKtB,EAAOC,aACRqB,EAAOrB,WAAa,8GAEjBqB,GAEXC,OAAQ,gBAAGC,EAAH,EAAGA,aAAoBC,GAAvB,EAAiBC,KAAjB,EAAuBD,YAAYE,EAAnC,EAAmCA,SAAU3B,EAA7C,EAA6CA,OAA7C,OACJ,sBAAMoB,SAAUI,EAAhB,SACI,cAAC,IAAD,CAAOtG,KAAK,aAAZ,SACK,gBAAG0G,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,iCACA,iCACI,+CAAOzB,UAAWC,IAAEyB,QAAYF,GAAhC,IAAuClF,KAAK,OAAOqF,YAAaZ,EAAIxF,QACnEkG,EAAKG,OAASH,EAAKI,SAAW,qBAAK7B,UAAWC,IAAEgB,SAAlB,SAA6BQ,EAAKG,WAErE,wBAAQ5B,UAAWC,IAAE6B,cAAelB,QAAS,WACzCnB,EAAasB,EAAIlG,GAAI+E,EAAOC,YAC5BN,EAAMhB,aAAY,IAEpBjC,KAAK,SAASyF,SAAUV,GAAcE,EAJxC,oBAOI,wBAAQvB,UAAWC,IAAE6B,cAAelB,QAAS,WAC7CrB,EAAMhB,aAAY,IADlB,6BAatB,mBAAGyB,UAAWC,IAAE1E,KAAMyG,MAAO,6HAA0BpB,QAAS,WA3HrF,IAAC7D,KA4HiC,EA3H/CwC,EAAMhB,YAAYxB,GA4HkBwC,EAAMR,cAAcgC,EAAIlG,KAF1B,SAIGkG,EAAIxF,SAMjB,eAACmF,EAAA,EAAD,WACI,wBAAQV,UAAWC,IAAEgC,kBACbrB,QACI,WA1H1B,IAAC/F,EAAIE,EAAOE,EA2HsB8F,EAAIhG,MAAQ,IA3H7CF,EA4H6CkG,EAAIlG,GA5H7CE,EA4HiDgG,EAAIhG,MAAQ,EA3HhFwE,EAAMZ,YAAY9D,EAAIE,EAAOE,GA4HmBsE,EAAMT,iBAAiBiC,EAAIlG,MAL/C,eADJ,IAUiBkG,EAAIhG,MAVrB,IAU4B,wBAAQiF,UAAWC,IAAEiC,oBAAqBtB,QAClE,WACIrB,EAAMb,SAASqC,EAAIlG,GAAIkG,EAAIhG,MAAQ,GACnCwE,EAAMT,iBAAiBiC,EAAIlG,KAHP,kBAO5B,cAAC6F,EAAA,EAAD,CAAWG,MAAM,QAAjB,SAAkD,GAAvBtB,EAAMjE,eAA2BiE,EAAMlE,iBAAmB0F,EAAIlG,GACrF,cAAC,IAAD,CACImG,SAAUlB,EACVmB,SAAU,SAAArB,GACN,IAAMsB,EAAS,GAIf,OAHKtB,EAAOG,cACRmB,EAAOnB,YAAc,sFAElBmB,GAEXC,OAAQ,gBAAGC,EAAH,EAAGA,aAAoBC,GAAvB,EAAiBC,KAAjB,EAAuBD,YAAYE,EAAnC,EAAmCA,SAAU3B,EAA7C,EAA6CA,OAA7C,OACJ,sBAAMoB,SAAUI,EAAhB,SACI,cAAC,IAAD,CAAOtG,KAAK,cAAZ,SACK,gBAAG0G,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,iCACI,iCACI,+CAAOzB,UAAWC,IAAEyB,QAAYF,GAAhC,IAAuClF,KAAK,OAAOqF,YAAaZ,EAAI/F,SACnEyG,EAAKG,OAASH,EAAKI,SAAW,qBAAK7B,UAAWC,IAAEgB,SAAlB,SAA6BQ,EAAKG,WAErE,wBAAQ5B,UAAWC,IAAE6B,cAAelB,QAAS,WACzCrB,EAAMN,cAAc8B,EAAIlG,GAAI+E,EAAOG,aACnCR,EAAMT,iBAAiBiC,EAAIlG,IAC3B0E,EAAML,kBAAiB,IAEzB5C,KAAK,SAASyF,SAAUV,GAAcE,EALxC,oBALJ,IAYc,wBAAQvB,UAAWC,IAAE6B,cAAelB,QAAS,WACvDrB,EAAML,kBAAiB,IADb,6BAclC,oBAAGc,UAAWC,IAAE1E,KAAMqF,QAAS,WAC/BrB,EAAML,kBAAiB,GACvBK,EAAMP,mBAAmB+B,EAAIlG,KAF7B,cAIAkG,EAAI/F,WAGR,cAAC0F,EAAA,EAAD,CAAWG,MAAM,QAAjB,SAA0BE,EAAI9F,MAAMgB,QAAQ,KAC5C,qBAAK+D,UAAWC,IAAEkC,gBAAlB,SAAmC,mBAAGnC,UAAWC,IAAEmC,aAAexB,QAAS,WA3NpF,IAACrF,IA4NyBwF,EAAIlG,GA3N7C0E,EAAMjB,UAAU/C,IA0N2C,8BArHxBwF,EAAIlG,OA4HvB,eAAC4F,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAW2B,QAAS,IACpB,cAAC3B,EAAA,EAAD,CAAW4B,QAAS,EAApB,4CACA,cAAC5B,EAAA,EAAD,CAAWG,MAAM,QAAjB,SAA0BtB,EAAMtE,qBAOhD,qBAAK+E,UAAWC,IAAEsC,YAAlB,SACI,cAAC,IAAD,CACQvB,SAjMH,SAACpB,GACdL,EAAMrB,cAAc0B,EAAO4C,UAC3BjD,EAAMpB,eAAeyB,EAAO6C,UAC5BlD,EAAMnB,eAAewB,EAAO8C,SAC5BnD,EAAMtB,aAAasB,EAAMhF,YAAagF,EAAM/E,aAAc+E,EAAM9E,eA8LhDwG,SAAU,SAAArB,GACN,IAAMsB,EAAS,GAgBf,OAfKtB,EAAO4C,WACRtB,EAAOsB,SAAW,8GAEjB5C,EAAO6C,WACRvB,EAAOuB,SAAW,0HAElBE,MAAM/C,EAAO6C,YACbvB,EAAOuB,SAAW,kHAEjB7C,EAAO8C,UACRxB,EAAOwB,QAAU,sFAEjBC,MAAM/C,EAAO8C,WACbxB,EAAOwB,QAAU,kHAEdxB,GAEXC,OAAQ,gBAAGC,EAAH,EAAGA,aAAcE,EAAjB,EAAiBA,KAAMD,EAAvB,EAAuBA,WAAYE,EAAnC,EAAmCA,SAAnC,EAA6C3B,OAA7C,OACJ,uBAAMoB,SAAUI,EAAhB,UACI,cAAC,IAAD,CAAOtG,KAAK,WAAZ,SACK,gBAAG0G,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,gCACI,+CAAOzB,UAAWC,IAAEyB,QAAYF,GAAhC,IAAuClF,KAAK,OAAOqF,YAAY,iGAC9DF,EAAKG,OAASH,EAAKI,SAAW,qBAAK7B,UAAWC,IAAEgB,SAAlB,SAA6BQ,EAAKG,cAI7E,cAAC,IAAD,CAAO9G,KAAK,WAAZ,SACK,gBAAG0G,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,gCACI,+CAAOzB,UAAWC,IAAEyB,QAAYF,GAAhC,IAAuClF,KAAK,OAAOqF,YAAY,6GAC9DF,EAAKG,OAASH,EAAKI,SAAW,qBAAK7B,UAAWC,IAAEgB,SAAlB,SAA6BQ,EAAKG,cAI7E,cAAC,IAAD,CAAO9G,KAAK,UAAZ,SACK,gBAAG0G,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,gCACI,+CAAOzB,UAAWC,IAAEyB,QAAYF,GAAhC,IAAuClF,KAAK,OAAOqF,YAAY,yEAC9DF,EAAKG,OAASH,EAAKI,SAAW,qBAAK7B,UAAWC,IAAEgB,SAAlB,SAA6BQ,EAAKG,cAI7E,sBAAK5B,UAAU,UAAf,UACI,cAAC4C,EAAA,EAAD,CAAQtG,KAAK,SAASyF,SAAUV,EAAhC,6FAGA,cAACuB,EAAA,EAAD,CACItG,KAAK,SACLsE,QAASU,EAAKuB,MACdd,SAAUV,GAAcE,EAH5B,+ECvUrBuB,MARf,WACE,OACE,qBAAK9C,UAAU,YAAf,SACE,cAAC,EAAD,OCKS+C,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCHVQ,GAAWC,YAAgB,CAC3B1F,UAAW7B,IAIXwH,GAAQC,YAAYH,GAAYI,OAAOC,8BAAgCD,OAAOC,gCAElFD,OAAOF,MAAQA,GAGAA,U,MCJfI,IAAS3C,OACL,cAAC,KAAD,UACI,cAAC,IAAD,CAAUuC,MAAOA,GAAjB,SACI,cAAC,EAAD,QAGRK,SAASC,eAAe,SAM5BjB,M,kBCrBAkB,EAAOC,QAAU,CAAC,YAAc,4BAA4B,iBAAmB,iCAAiC,UAAY,0BAA0B,SAAW,yBAAyB,OAAS,uBAAuB,QAAU,wBAAwB,cAAgB,8BAA8B,kBAAoB,kCAAkC,oBAAsB,oCAAoC,KAAO,qBAAqB,aAAe,6BAA6B,gBAAkB,gCAAgC,KAAO,wB","file":"static/js/main.93b46ea0.chunk.js","sourcesContent":["const ADD_ITEM = 'ADD_ITEM';\r\nconst UPDATE_NEW_ID = 'UPDATE_NEW_ID';\r\nconst ADD_ROW = 'ADD_ROW';\r\nconst UPDATE_NEW_ITEM_NAME = 'UPDATE_NEW_ITEM_NAME';\r\nconst UPDATE_NEW_ITEM_COUNT = 'UPDATE_NEW_ITEM_COUNT';\r\nconst UPDATE_NEW_ITEM_PRICE = 'UPDATE_NEW_ITEM_PRICE';\r\nconst SET_TOTAL = 'SET_TOTAL';\r\nconst DELETE_ROW = 'DELETE_ROW';\r\nconst SET_EDIT_MODE = 'SET_EDIT_MODE';\r\nconst SET_EDIT_NAME = 'SET_EDIT_NAME';\r\nconst SAVE_EDIT_NAME = 'SAVE_EDIT_NAME';\r\nconst ADD_COUNT = 'ADD_COUNT';\r\nconst DELETE_COUNT = 'DELETE_COUNT';\r\nconst EDIT_NAME = 'EDIT_NAME';\r\nconst UPDATE_ROWS = 'UPDATE_ROWS';\r\nconst UPDATE_TOTAL = 'UPDATE_TOTAL';\r\nconst SET_EDIT_MODE_ID = 'SET_EDIT_MODE_ID';\r\nconst SET_EDIT_MODE_ID_PRICE = 'SET_EDIT_MODE_ID_PRICE';\r\nconst SAVE_EDIT_PRICE = 'SAVE_EDIT_PRICE';\r\nconst SET_EDIT_MODE_PRICE = 'SET_EDIT_MODE_PRICE';\r\nconst SET_LIST_PRICE_UP = 'SET_LIST_PRICE_UP';\r\nconst SET_LIST_PRICE_DOWN = 'SET_LIST_PRICE_DOWN';\r\nconst SET_LIST_DESC_UP = 'SET_LIST_DESC_UP';\r\nconst SET_LIST_DESC_DOWN = 'SET_LIST_DESC_DOWN';\r\n\r\n\r\nlet initialState = {\r\n\r\n    newItemName: 'Название',\r\n    newItemCount: 0,\r\n    newItemPrice: 1,\r\n    rows: [\r\n        createRow(1, 'Компьютер', 3, 2157),\r\n        createRow(2, 'Телевизор', 4, 2485),\r\n        createRow(3, 'Холодильник', 2, 1634),\r\n        createRow(4, 'Ноутбук', 2, 3186),\r\n        createRow(5, 'Пылесос', 2, 386),\r\n        createRow(6, 'Наушники', 5, 138),\r\n    ],\r\n    rows2: [\r\n        {id: 1, name: 'Компьютер', count: 3, price: 2157},\r\n        {id: 2, name: 'Телевизор', count: 4, price: 2485},\r\n        {id: 3, name: 'Холодильник', count: 2, price: 1634},\r\n        {id: 4, name: 'Ноутбук', count: 2, price: 3186},\r\n        {id: 5, name: 'Пылесос', count: 21, price: 386},\r\n        {id: 6, name: 'Наушники', count: 5, price: 138}\r\n    ],\r\n    total: null,\r\n    editMode: false,\r\n    editModeId: false,\r\n    name: null,\r\n    editModeName: false,\r\n    editModeIdPrice: false,\r\n    editModePrice: false,\r\n\r\n\r\n};\r\n\r\nfunction priceRow(count, price) {\r\n\r\n    return count * price;\r\n}\r\n\r\nfunction createRow(id, desc, count, price) {\r\n    const total = priceRow(count, price);\r\n    return {id, desc, count, price, total};\r\n}\r\n\r\nfunction subtotal(items) {\r\n    return items.map(({total}) => total).reduce((sum, i) => sum + i, 0);\r\n}\r\n\r\nfunction ccyFormat(num) {\r\n    return `${num.toFixed(2)}`;\r\n}\r\n\r\n\r\nconst itemsReducer = (state = initialState, action) => {\r\n\r\n\r\n    const invoiceSubtotal = subtotal(state.rows);\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case ADD_ITEM: {\r\n            let newItem = {\r\n                id: state.items.length + 1,\r\n                name: state.newItemName,\r\n                count: 0,\r\n                price: 2\r\n            };\r\n            return {\r\n                ...state,\r\n                items: [...state.items, newItem],\r\n                newItemName: ''\r\n            };\r\n        }\r\n        case UPDATE_NEW_ITEM_NAME: {\r\n            return {\r\n                ...state,\r\n                newItemName: action.text\r\n            }\r\n        }\r\n        case UPDATE_NEW_ITEM_COUNT: {\r\n            return {\r\n                ...state,\r\n                newItemCount: parseInt(action.text)\r\n            }\r\n        }\r\n        case UPDATE_NEW_ITEM_PRICE: {\r\n            return {\r\n                ...state,\r\n                newItemPrice: parseInt(action.text)\r\n            }\r\n        }\r\n        case SET_TOTAL: {\r\n            return {\r\n                ...state,\r\n                total: ccyFormat(invoiceSubtotal)\r\n            }\r\n        }\r\n        case DELETE_ROW: {\r\n\r\n            return {\r\n                ...state,\r\n                rows: state.rows.filter(item => item.id !== action.desc)\r\n            }\r\n        }\r\n\r\n        case ADD_ROW: {\r\n            let last = () => {\r\n                const split = state.rows.reverse()\r\n                let splitRes = split[0].id\r\n                return splitRes\r\n            }\r\n            return {\r\n                ...state,\r\n                rows: [...state.rows, createRow(last() + 1, state.newItemName, state.newItemCount, state.newItemPrice)]\r\n            }\r\n        }\r\n        case SET_EDIT_MODE: {\r\n            return {\r\n                ...state,\r\n                editMode: action.mode\r\n            }\r\n        }\r\n        case SET_EDIT_MODE_PRICE: {\r\n            return {\r\n                ...state,\r\n                editModePrice: action.mode\r\n            }\r\n        }\r\n        case SET_EDIT_MODE_ID: {\r\n            return {\r\n                ...state,\r\n                editModeId: action.id\r\n            }\r\n        }\r\n        case EDIT_NAME: {\r\n            return {\r\n                ...state,\r\n                editModeName: action.mode\r\n            }\r\n        }\r\n        case SET_EDIT_NAME: {\r\n            return {\r\n                ...state,\r\n                name: action.name\r\n            }\r\n        }\r\n        case SAVE_EDIT_NAME: {\r\n            let change = (id, desc) => {\r\n                return state.rows.map(obj => {\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, desc}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.name)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n        case SAVE_EDIT_PRICE: {\r\n            let change = (id, price) => {\r\n                return state.rows.map(obj => {\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, price}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.price)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n        case ADD_COUNT: {\r\n\r\n            let change = (id, count) => {\r\n                return state.rows.map(obj => {\r\n\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, count}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.count)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n        case UPDATE_TOTAL: {\r\n\r\n            let change = (id) => {\r\n                return state.rows.map(obj => {\r\n                    let total = obj.count*obj.price\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, total}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n\r\n        case DELETE_COUNT: {\r\n            let change = (id, count) => {\r\n                return state.rows.map(obj => {\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, count}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.count)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n        case UPDATE_ROWS: {\r\n            return {\r\n                ...state,\r\n                rows: state.rows.map(r => {return r})\r\n            }\r\n        }\r\n        case SET_EDIT_MODE_ID_PRICE: {\r\n            return {\r\n                ...state,\r\n                editModeIdPrice: action.id\r\n            }\r\n        }\r\n        case SET_LIST_PRICE_UP: {\r\n            let list = () => {\r\n                return state.rows.sort(function (a, b) {\r\n                    if (a.price > b.price) {\r\n                        return 1;\r\n                    }\r\n                    if (a.price < b.price) {\r\n                        return -1;\r\n                    }\r\n                    // a должно быть равным b\r\n                    return 0;\r\n                }\r\n                )\r\n                }\r\n            return {\r\n                ...state,\r\n                rows: list()\r\n\r\n            }\r\n        }\r\n        case SET_LIST_PRICE_DOWN: {\r\n            let list = () => {\r\n                return state.rows.sort(function (a, b) {\r\n                        if (a.price > b.price) {\r\n                            return -1;\r\n                        }\r\n                        if (a.price < b.price) {\r\n                            return 1;\r\n                        }\r\n                        // a должно быть равным b\r\n                        return 0;\r\n                    }\r\n                )\r\n            }\r\n            return {\r\n                ...state,\r\n                rows: list()\r\n\r\n            }\r\n        }\r\n        case SET_LIST_DESC_UP: {\r\n            let list = () => {\r\n                return state.rows.sort(function (a, b) {\r\n\r\n                        return a.desc.localeCompare(b.desc);\r\n                    }\r\n                )\r\n            }\r\n            return {\r\n                ...state,\r\n                rows: list()\r\n\r\n            }\r\n        }\r\n        case SET_LIST_DESC_DOWN: {\r\n            let list = () => {\r\n                return state.rows.sort(function (a, b) {\r\n\r\n                        return b.desc.localeCompare(a.desc);\r\n                    }\r\n                )\r\n            }\r\n            return {\r\n                ...state,\r\n                rows: list()\r\n\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateNewName = (text) =>\r\n    ({type: UPDATE_NEW_ITEM_NAME, text})\r\nexport const updateNewCount = (text) =>\r\n    ({type: UPDATE_NEW_ITEM_COUNT, text})\r\nexport const updateNewPrice = (text) =>\r\n    ({type: UPDATE_NEW_ITEM_PRICE, text})\r\nexport const updateTotal = (total) =>\r\n    ({type: SET_TOTAL, total})\r\nexport const deleteRow = (desc) =>\r\n    ({type: DELETE_ROW, desc})\r\nexport const setEditMode = (mode) =>\r\n    ({type: SET_EDIT_MODE, mode})\r\nexport const setEditModePrice = (mode) =>\r\n    ({type: SET_EDIT_MODE_PRICE, mode})\r\nexport const setEditModeId = (id) =>\r\n    ({type: SET_EDIT_MODE_ID, id})\r\nexport const setEditModeIdPrice = (id) =>\r\n    ({type: SET_EDIT_MODE_ID_PRICE, id})\r\nexport const setEditModeName = (mode) =>\r\n    ({type: EDIT_NAME, mode})\r\nexport const editName = (name) =>\r\n    ({type: SET_EDIT_NAME, name})\r\nexport const SaveEditName = (id, name) =>\r\n    ({type: SAVE_EDIT_NAME, id, name})\r\nexport const SaveEditPrice = (id, price) =>\r\n    ({type: SAVE_EDIT_PRICE, id, price})\r\nexport const addCount = (id, count) =>\r\n    ({type: ADD_COUNT, id, count})\r\nexport const updateTotalCount = (id) =>\r\n    ({type: UPDATE_TOTAL, id})\r\nexport const deleteCount = (id, count) =>\r\n    ({type: DELETE_COUNT, id, count})\r\nexport const AddRowAction = (desc, count, price) =>\r\n    ({type: ADD_ROW, desc, count, price})\r\nexport const updateRows = () =>\r\n    ({type: UPDATE_ROWS})\r\nexport const setListPriceUp = () =>\r\n    ({type: SET_LIST_PRICE_UP})\r\nexport const setListPriceDown = () =>\r\n    ({type: SET_LIST_PRICE_DOWN})\r\nexport const setListDescUp = () =>\r\n    ({type: SET_LIST_DESC_UP})\r\nexport const setListDescDown = () =>\r\n    ({type: SET_LIST_DESC_DOWN})\r\n\r\n\r\nexport default itemsReducer;","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addCount,\r\n    AddRowAction,\r\n    deleteCount,\r\n    deleteRow,\r\n    editName,\r\n    SaveEditName, SaveEditPrice,\r\n    setEditMode,\r\n    setEditModeId, setEditModeIdPrice,\r\n    setEditModeName, setEditModePrice, setListDescDown, setListDescUp, setListPriceDown, setListPriceUp,\r\n    updateNewCount,\r\n    updateNewName,\r\n    updateNewPrice,\r\n    updateRows,\r\n    updateTotal,\r\n    updateTotalCount\r\n} from \"../redux/items-reducer\";\r\nimport {Button, Card} from \"react-bootstrap\";\r\nimport s from './styles.module.css';\r\nimport {Field, Form} from \"react-final-form\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\nlet ItemsTable = (props) => {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    let onAddItem = () => {\r\n        props.AddRowAction(props.newItemName, props.newItemCount, props.newItemPrice)\r\n    }\r\n    let onDeleteItem = (desc) => {\r\n        props.deleteRow(desc)\r\n    }\r\n    let newNameElement = React.createRef()\r\n\r\n    let onNameChange = () => {\r\n        let text = newNameElement.current.value\r\n        props.updateNewName(text)\r\n    }\r\n    let newCountElement = React.createRef()\r\n\r\n    let onCountChange = () => {\r\n        let text = newCountElement.current.value\r\n        props.updateNewCount(text)\r\n    }\r\n    let newPriceElement = React.createRef()\r\n\r\n    let onPriceChange = () => {\r\n        let text = newPriceElement.current.value\r\n        props.updateNewPrice(text)\r\n    }\r\n    let editModeOn = (mode) => {\r\n        props.setEditMode(mode)\r\n\r\n    }\r\n    let newEditNameElement = React.createRef()\r\n\r\n    let onEditName = () => {\r\n        let text = newEditNameElement.current.value\r\n        props.editName(text)\r\n    }\r\n    let saveEditName = (id, name) => {\r\n        if (props.editMode)\r\n            props.SaveEditName(id, name)\r\n    }\r\n    let deleteCount = (id, count, total) => {\r\n        props.deleteCount(id, count, total)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        props.updateTotal();\r\n\r\n\r\n    },);\r\n    const onSubmit = (values) => {\r\n        props.updateNewName(values.username)\r\n        props.updateNewCount(values.password)\r\n        props.updateNewPrice(values.confirm)\r\n        props.AddRowAction(props.newItemName, props.newItemCount, props.newItemPrice)\r\n    }\r\n    const onSubmitDesc = (values) => {\r\n        props.updateNewName(values.changeDesc)\r\n        saveEditName()\r\n    }\r\n     const onSubmitPrice = (values) => {\r\n            props.updateNewPrice(values.changePrice)\r\n            saveEditName()\r\n        }\r\n\r\n\r\n\r\n    return (<div className={s.wrapper}>\r\n\r\n           \r\n            <div>\r\n            <TableContainer component={Paper}>\r\n\r\n                <Table className={classes.table} aria-label=\"spanning table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Упорядочить по</TableCell>\r\n                            <TableCell><button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" onClick={() => {\r\n                                props.setListDescUp()\r\n                                props.updateRows()\r\n                            }}>Названию А-я</button><button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" onClick={() => {\r\n                                props.setListDescDown()\r\n                                props.updateRows()\r\n                            }} >Названию Я-а</button></TableCell>\r\n                            <TableCell></TableCell>\r\n                            <TableCell><button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" onClick={() => {\r\n                                props.setListPriceDown()\r\n                                props.updateRows()\r\n                            }}>Цене: убыванию</button>\r\n                                <button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" onClick={() => {\r\n                                props.setListPriceUp()\r\n                                props.updateRows()\r\n                            }}>Цене: возрастанию</button></TableCell>\r\n                            <TableCell></TableCell>\r\n\r\n\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell >id</TableCell>\r\n                            <TableCell>Название</TableCell>\r\n                            <TableCell align=\"right\">Количетсво</TableCell>\r\n                            <TableCell align=\"right\">Цена за 1 единицу</TableCell>\r\n                            <TableCell align=\"right\">Сумма</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.rows.map((row) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell>{row.id}</TableCell>\r\n                                <TableCell>\r\n                                    {(props.editMode == true) && (props.editModeId == row.id)\r\n                                        ? <Form\r\n                                            onSubmit={onSubmitDesc}\r\n                                            validate={values => {\r\n                                                const errors = {}\r\n                                                if (!values.changeDesc) {\r\n                                                    errors.changeDesc = 'Вы не ввели название.'\r\n                                                }\r\n                                                return errors\r\n                                            }}\r\n                                            render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                                                <form onSubmit={handleSubmit}>\r\n                                                    <Field name=\"changeDesc\">\r\n                                                        {({ input, meta }) => (\r\n                                                            <span>\r\n                                                            <span>\r\n                                                                <input className={s.Inputs} {...input} type=\"text\" placeholder={row.desc} />\r\n                                                                {meta.error && meta.touched && <div className={s.validate}>{meta.error}</div>}\r\n                                                            </span>\r\n                                                            <button className={s.changeButtons} onClick={() => {\r\n                                                                saveEditName(row.id, values.changeDesc)\r\n                                                                props.setEditMode(false)\r\n                                                                }\r\n                                                            } type=\"submit\" disabled={submitting || pristine}>\r\n                                                            ✔\r\n                                                            </button>\r\n                                                                <button className={s.changeButtons} onClick={() => {\r\n                                                                props.setEditMode(false)\r\n                                                            }\r\n                                                            }>\r\n                                                                ×\r\n                                                            </button>\r\n                                                            </span>\r\n                                                        )}\r\n                                                    </Field>\r\n\r\n                                                </form>\r\n                                            )}\r\n                                        />\r\n                                        : <a className={s.desc} title={\"Нажмите чтобы изменить\"} onClick={() => {\r\n                                            editModeOn(true)\r\n                                            props.setEditModeId(row.id)\r\n                                        }}>\r\n                                            {row.desc}\r\n                                        </a>\r\n                                    }\r\n                                </TableCell>\r\n\r\n\r\n                                <TableCell >\r\n                                    <button className={s.floatingButtonRed}\r\n                                            onClick={\r\n                                                () => {\r\n                                                    if (row.count > 0) {\r\n                                                        deleteCount(row.id, row.count - 1)\r\n                                                        props.updateTotalCount(row.id)\r\n                                                    }\r\n\r\n                                                }}\r\n                                    >-</button> {row.count} <button className={s.floatingButtonGreen} onClick={\r\n                                    () => {\r\n                                        props.addCount(row.id, row.count + 1)\r\n                                        props.updateTotalCount(row.id)\r\n\r\n                                    }}>+</button></TableCell>\r\n\r\n                                <TableCell align=\"right\">{(props.editModePrice == true) && (props.editModeIdPrice == row.id) ?\r\n                                    <Form\r\n                                        onSubmit={onSubmitPrice}\r\n                                        validate={values => {\r\n                                            const errors = {}\r\n                                            if (!values.changePrice) {\r\n                                                errors.changePrice = 'Вы не ввели цену.'\r\n                                            }\r\n                                            return errors\r\n                                        }}\r\n                                        render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                                            <form onSubmit={handleSubmit}>\r\n                                                <Field name=\"changePrice\">\r\n                                                    {({ input, meta }) => (\r\n                                                        <span>\r\n                                                            <span>\r\n                                                                <input className={s.Inputs} {...input} type=\"text\" placeholder={row.price} />\r\n                                                                {meta.error && meta.touched && <div className={s.validate}>{meta.error}</div>}\r\n                                                            </span>\r\n                                                            <button className={s.changeButtons} onClick={() => {\r\n                                                                props.SaveEditPrice(row.id, values.changePrice)\r\n                                                                props.updateTotalCount(row.id)\r\n                                                                props.setEditModePrice(false)\r\n                                                            }\r\n                                                            } type=\"submit\" disabled={submitting || pristine}>\r\n                                                           ✔\r\n                                                            </button> <button className={s.changeButtons} onClick={() => {\r\n                                                            props.setEditModePrice(false)\r\n                                                        }\r\n                                                        }>\r\n                                                                ×\r\n                                                            </button>\r\n                                                            </span>\r\n                                                    )}\r\n                                                </Field>\r\n\r\n                                            </form>\r\n                                        )}\r\n                                    />\r\n                                    :\r\n                                    <a className={s.desc} onClick={() => {\r\n                                    props.setEditModePrice(true)\r\n                                    props.setEditModeIdPrice(row.id)\r\n                                }\r\n                                }> {row.price}</a>}</TableCell>\r\n\r\n\r\n                                <TableCell align=\"right\">{row.total.toFixed(2)}</TableCell>\r\n                                <div className={s.deleteButtonDiv}><a className={s.deleteButton}  onClick={() => {\r\n                                    onDeleteItem(row.id)\r\n\r\n                                }}>🗑</a></div>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        <TableRow>\r\n                            <TableCell rowSpan={3}/>\r\n                            <TableCell colSpan={3}>Итого</TableCell>\r\n                            <TableCell align=\"right\">{props.total}</TableCell>\r\n                        </TableRow>\r\n\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n            <div className={s.constructor}>\r\n                <Form\r\n                        onSubmit={onSubmit}\r\n                        validate={values => {\r\n                            const errors = {}\r\n                            if (!values.username) {\r\n                                errors.username = 'Вы не ввели название.'\r\n                            }\r\n                            if (!values.password) {\r\n                                errors.password = 'Вы не ввели количетсво.'\r\n                            }\r\n                            if (isNaN(values.password)) {\r\n                                errors.password = 'Нельзя вводить текст'\r\n                            }\r\n                            if (!values.confirm) {\r\n                                errors.confirm = 'Вы не ввели цену.'\r\n                            }\r\n                            if (isNaN(values.confirm)) {\r\n                                errors.confirm = 'Нельзя вводить текст'\r\n                            }\r\n                            return errors\r\n                        }}\r\n                        render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <Field name=\"username\">\r\n                                    {({ input, meta }) => (\r\n                                        <div>\r\n                                            <input className={s.Inputs} {...input} type=\"text\" placeholder=\"Введите название\" />\r\n                                            {meta.error && meta.touched && <div className={s.validate}>{meta.error}</div>}\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                                <Field name=\"password\">\r\n                                    {({ input, meta }) => (\r\n                                        <div>\r\n                                            <input className={s.Inputs} {...input} type=\"text\" placeholder=\"Введите количество\" />\r\n                                            {meta.error && meta.touched && <div className={s.validate}>{meta.error}</div>}\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                                <Field name=\"confirm\">\r\n                                    {({ input, meta }) => (\r\n                                        <div>\r\n                                            <input className={s.Inputs} {...input} type=\"text\" placeholder=\"Введите цену\" />\r\n                                            {meta.error && meta.touched && <div className={s.validate}>{meta.error}</div>}\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                                <div className=\"buttons\">\r\n                                    <Button type=\"submit\" disabled={submitting}>\r\n                                        Добавить товар\r\n                                    </Button>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        onClick={form.reset}\r\n                                        disabled={submitting || pristine}\r\n                                    >\r\n                                        Очистить\r\n                                    </Button>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n                    />\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    items: state.itemsPage.items,\r\n    newItemText: state.itemsPage.newItemText,\r\n    rows: state.itemsPage.rows,\r\n    rows2: state.itemsPage.rows2,\r\n    newItemPrice: state.itemsPage.newItemPrice,\r\n    newItemName: state.itemsPage.newItemName,\r\n    newItemCount: state.itemsPage.newItemCount,\r\n    total: state.itemsPage.total,\r\n    editMode: state.itemsPage.editMode,\r\n    name: state.itemsPage.name,\r\n    editModeName: state.itemsPage.editModeName,\r\n    editModeId: state.itemsPage.editModeId,\r\n    editModeIdPrice: state.itemsPage.editModeIdPrice,\r\n    editModePrice: state.itemsPage.editModePrice,\r\n\r\n\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        AddRowAction, updateNewName, updateNewCount,\r\n        updateNewPrice, updateTotal, deleteRow, setEditMode, editName, SaveEditName, addCount,\r\n        deleteCount, setEditModeName, updateRows, updateTotalCount, setEditModeId,\r\n        setEditModeIdPrice, SaveEditPrice, setEditModePrice, setListPriceUp,\r\n        setListPriceDown, setListDescUp, setListDescDown\r\n    })\r\n)(ItemsTable);\r\n\r\n\r\n","import './App.css';\nimport React from \"react\";\nimport ItemsTable from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className='mainStyle'>\n      <ItemsTable />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport itemsReducer from \"./items-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    itemsPage: itemsReducer,\r\n\r\n});\r\n\r\nlet store = createStore(reducers,   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nwindow.store = store;\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"constructor\":\"styles_constructor__1RSyQ\",\"newElementInputs\":\"styles_newElementInputs__niNOM\",\"addButton\":\"styles_addButton__1ZZDc\",\"validate\":\"styles_validate__122Fx\",\"Inputs\":\"styles_Inputs__14FWq\",\"wrapper\":\"styles_wrapper__3sbSM\",\"changeButtons\":\"styles_changeButtons__1w9To\",\"floatingButtonRed\":\"styles_floatingButtonRed__twzfQ\",\"floatingButtonGreen\":\"styles_floatingButtonGreen__2bur7\",\"desc\":\"styles_desc__30QjO\",\"deleteButton\":\"styles_deleteButton__oZ5Mw\",\"deleteButtonDiv\":\"styles_deleteButtonDiv__2eV6Z\",\"list\":\"styles_list__3jGpc\"};"],"sourceRoot":""}