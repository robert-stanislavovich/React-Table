{"version":3,"sources":["components/styles.module.css","redux/items-reducer.js","components/Table.jsx","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["module","exports","ADD_ITEM","ADD_ROW","UPDATE_NEW_ITEM_NAME","UPDATE_NEW_ITEM_COUNT","UPDATE_NEW_ITEM_PRICE","SET_TOTAL","DELETE_ROW","SET_EDIT_MODE","SET_EDIT_NAME","SAVE_EDIT_NAME","ADD_COUNT","DELETE_COUNT","EDIT_NAME","initialState","newItemName","newItemCount","newItemPrice","rows","createRow","total","editMode","name","editModeName","id","desc","count","price","priceRow","subtotal","items","map","reduce","sum","i","ccyFormat","num","toFixed","itemsReducer","state","action","invoiceSubtotal","type","newItem","length","text","parseInt","filter","item","last","reverse","mode","change","obj","changedRows","useStyles","makeStyles","table","minWidth","compose","connect","itemsPage","newItemText","AddRowAction","updateNewName","updateNewCount","updateNewPrice","updateTotal","deleteRow","setEditMode","editName","SaveEditName","addCount","deleteCount","setEditModeName","props","classes","newNameElement","React","createRef","newCountElement","newPriceElement","editModeOn","newEditNameElement","useEffect","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","Button","variant","size","onClick","rowSpan","colSpan","s","constructor","changeName","onChange","current","value","ref","newElementInputs","addButton","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cfef5a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"constructor\":\"styles_constructor__1RSyQ\",\"changeName\":\"styles_changeName__2FzuU\",\"newElementInputs\":\"styles_newElementInputs__niNOM\",\"addButton\":\"styles_addButton__1ZZDc\"};","const ADD_ITEM = 'ADD_ITEM';\r\nconst UPDATE_NEW_ID = 'UPDATE_NEW_ID';\r\nconst ADD_ROW = 'ADD_ROW';\r\nconst UPDATE_NEW_ITEM_NAME = 'UPDATE_NEW_ITEM_NAME';\r\nconst UPDATE_NEW_ITEM_COUNT = 'UPDATE_NEW_ITEM_COUNT';\r\nconst UPDATE_NEW_ITEM_PRICE = 'UPDATE_NEW_ITEM_PRICE';\r\nconst SET_TOTAL = 'SET_TOTAL';\r\nconst DELETE_ROW = 'DELETE_ROW';\r\nconst SET_EDIT_MODE = 'SET_EDIT_MODE';\r\nconst SET_EDIT_NAME = 'SET_EDIT_NAME';\r\nconst SAVE_EDIT_NAME = 'SAVE_EDIT_NAME';\r\nconst ADD_COUNT = 'ADD_COUNT';\r\nconst DELETE_COUNT = 'DELETE_COUNT';\r\nconst EDIT_NAME = 'EDIT_NAME';\r\n\r\n\r\nlet initialState = {\r\n\r\n    newItemName: 'Название',\r\n    newItemCount: 0,\r\n    newItemPrice: 1,\r\n    rows: [\r\n        createRow(1, 'Компьютер', 3, 11.15),\r\n        createRow(2, 'Телевизор', 4, 45.99),\r\n        createRow(3, 'Холодильник', 2, 17.99),\r\n        createRow(4, 'Ноутбук', 2, 11.99),\r\n    ],\r\n    total: null,\r\n    editMode: false,\r\n    name: null,\r\n    editModeName: false,\r\n\r\n\r\n};\r\n\r\nfunction priceRow(count, price) {\r\n\r\n    return count * price;\r\n}\r\n\r\nfunction createRow(id, desc, count, price) {\r\n    const total = priceRow(count, price);\r\n    return {id, desc, count, price, total};\r\n}\r\n\r\nfunction subtotal(items) {\r\n    return items.map(({total}) => total).reduce((sum, i) => sum + i, 0);\r\n}\r\n\r\nfunction ccyFormat(num) {\r\n    return `${num.toFixed(2)}`;\r\n}\r\n\r\n\r\nconst itemsReducer = (state = initialState, action) => {\r\n\r\n\r\n    const invoiceSubtotal = subtotal(state.rows);\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case ADD_ITEM: {\r\n            let newItem = {\r\n                id: state.items.length + 1,\r\n                name: state.newItemName,\r\n                count: 0,\r\n                price: 2\r\n            };\r\n            return {\r\n                ...state,\r\n                items: [...state.items, newItem],\r\n                newItemName: ''\r\n            };\r\n        }\r\n        case UPDATE_NEW_ITEM_NAME: {\r\n            return {\r\n                ...state,\r\n                newItemName: action.text\r\n            }\r\n        }\r\n        case UPDATE_NEW_ITEM_COUNT: {\r\n            return {\r\n                ...state,\r\n                newItemCount: action.text\r\n            }\r\n        }\r\n        case UPDATE_NEW_ITEM_PRICE: {\r\n            return {\r\n                ...state,\r\n                newItemPrice: parseInt(action.text)\r\n            }\r\n        }\r\n        case SET_TOTAL: {\r\n            return {\r\n                ...state,\r\n                total: ccyFormat(invoiceSubtotal)\r\n            }\r\n        }\r\n        case DELETE_ROW: {\r\n\r\n            return {\r\n                ...state,\r\n                rows: state.rows.filter(item => item.desc !== action.desc)\r\n            }\r\n        }\r\n\r\n        case ADD_ROW: {\r\n            let last = () => {\r\n                const split = state.rows.reverse()\r\n                let splitRes = split[0].id\r\n                return splitRes\r\n            }\r\n            return {\r\n                ...state,\r\n                rows: [...state.rows, createRow(last() + 1, state.newItemName, state.newItemCount, state.newItemPrice)]\r\n            }\r\n        }\r\n        case SET_EDIT_MODE: {\r\n            return {\r\n                ...state,\r\n                editMode: action.mode\r\n            }\r\n        }\r\n        case EDIT_NAME: {\r\n            return {\r\n                ...state,\r\n                editModeName: action.mode\r\n            }\r\n        }\r\n        case SET_EDIT_NAME: {\r\n            return {\r\n                ...state,\r\n                name: action.name\r\n            }\r\n        }\r\n        case SAVE_EDIT_NAME: {\r\n            let change = (id, desc) => {\r\n                return state.rows.map(obj => {\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, desc}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.name)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n        case ADD_COUNT: {\r\n\r\n            let change = (id, count, total) => {\r\n                return state.rows.map(obj => {\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, count, total}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.count, action.total)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n        case DELETE_COUNT: {\r\n            let change = (id, count, total) => {\r\n                return state.rows.map(obj => {\r\n                    if (obj.id === id) {\r\n                        return {...obj, id, count, total}\r\n                    }\r\n                    return obj;\r\n                });\r\n            }\r\n            let changedRows = change(action.id, action.count, action.total)\r\n            return {\r\n                ...state,\r\n                rows: changedRows\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateNewName = (text) =>\r\n    ({type: UPDATE_NEW_ITEM_NAME, text})\r\nexport const updateNewCount = (text) =>\r\n    ({type: UPDATE_NEW_ITEM_COUNT, text})\r\nexport const updateNewPrice = (text) =>\r\n    ({type: UPDATE_NEW_ITEM_PRICE, text})\r\nexport const updateTotal = (total) =>\r\n    ({type: SET_TOTAL, total})\r\nexport const deleteRow = (desc) =>\r\n    ({type: DELETE_ROW, desc})\r\nexport const setEditMode = (mode) =>\r\n    ({type: SET_EDIT_MODE, mode})\r\nexport const setEditModeName = (mode) =>\r\n    ({type: EDIT_NAME, mode})\r\nexport const editName = (name) =>\r\n    ({type: SET_EDIT_NAME, name})\r\nexport const SaveEditName = (id, name) =>\r\n    ({type: SAVE_EDIT_NAME, id, name})\r\nexport const addCount = (id, count, total) =>\r\n    ({type: ADD_COUNT, id, count, total})\r\nexport const deleteCount = (id, count, total) =>\r\n    ({type: DELETE_COUNT, id, count, total})\r\nexport const AddRowAction = (desc, count, price) =>\r\n    ({type: ADD_ROW, desc, count, price})\r\n\r\n\r\nexport default itemsReducer;","import React, {useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addCount,\r\n    AddRowAction, deleteCount, deleteRow, editName, SaveEditName, setEditMode, setEditModeName, updateNewCount,\r\n    updateNewName, updateNewPrice, updateTotal\r\n} from \"../redux/items-reducer\";\r\nimport {Button, Card} from \"react-bootstrap\";\r\nimport s from './styles.module.css';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n});\r\n\r\nfunction subtotal(items) {\r\n    return items.map(({price}) => price).reduce((sum, i) => sum + i, 0);\r\n}\r\n\r\nlet ItemsTable = (props) => {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    let onAddItem = () => {\r\n        props.AddRowAction(props.newItemName, props.newItemCount, props.newItemPrice)\r\n    }\r\n    let onDeleteItem = (desc) => {\r\n        props.deleteRow(desc)\r\n    }\r\n    let newNameElement = React.createRef()\r\n\r\n    let onNameChange = () => {\r\n        let text = newNameElement.current.value\r\n        props.updateNewName(text)\r\n    }\r\n    let newCountElement = React.createRef()\r\n\r\n    let onCountChange = () => {\r\n        let text = newCountElement.current.value\r\n        props.updateNewCount(text)\r\n    }\r\n    let newPriceElement = React.createRef()\r\n\r\n    let onPriceChange = () => {\r\n        let text = newPriceElement.current.value\r\n        props.updateNewPrice(text)\r\n    }\r\n    let editModeOn = (mode) => {\r\n        props.setEditMode(mode)\r\n\r\n    }\r\n    let newEditNameElement = React.createRef()\r\n\r\n    let onEditName = () => {\r\n        let text = newEditNameElement.current.value\r\n        props.editName(text)\r\n    }\r\n    let saveEditName = (id) => {\r\n        if (props.editMode)\r\n            props.SaveEditName(id, props.name)\r\n    }\r\n    let addCount = (id, count, total) => {\r\n        props.addCount(id, count, total)\r\n    }\r\n    let deleteCount = (id, count, total) => {\r\n        props.deleteCount(id, count, total)\r\n    }\r\n\r\n    let total = subtotal(props.rows)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        props.updateTotal(total);\r\n\r\n    },);\r\n\r\n\r\n    return (<div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"spanning table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>id</TableCell>\r\n                            <TableCell>Название</TableCell>\r\n                            <TableCell align=\"right\">Количетсво</TableCell>\r\n                            <TableCell align=\"right\">Цена за 1 единицу</TableCell>\r\n                            <TableCell align=\"right\">Сумма</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.rows.map((row) => (\r\n\r\n                            <TableRow key={row.desc}>\r\n                                <TableCell>{row.id}</TableCell>\r\n                                <TableCell>{row.desc}</TableCell>\r\n                                <TableCell align=\"right\"><Button variant=\"outline-danger\" size=\"sm\"\r\n                                                                 onClick={\r\n                                                                     () => {\r\n                                                                         if (row.count > 0) {\r\n                                                                             deleteCount(row.id, row.count - 1, row.count * row.price)\r\n                                                                         }\r\n\r\n                                                                     }}\r\n                                > - </Button> {row.count} <Button variant=\"outline-success\" size=\"sm\" onClick={\r\n                                    () => {\r\n                                        addCount(row.id, row.count + 1, row.count * row.price)\r\n\r\n                                    }}> + </Button></TableCell>\r\n\r\n                                <TableCell align=\"right\">{row.price}</TableCell>\r\n                                <TableCell align=\"right\">{row.total.toFixed(2)}</TableCell>\r\n\r\n\r\n                                <Button variant=\"outline-danger\" onClick={() => {\r\n                                    onDeleteItem(row.desc)\r\n\r\n                                }}>Удалить товар</Button>\r\n                                {props.editMode ? <Button variant=\"outline-success\" onClick={() => {\r\n                                    saveEditName(row.id)\r\n                                }}>Сохранить название</Button> : \"\"}\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        <TableRow>\r\n                            <TableCell rowSpan={3}/>\r\n                            <TableCell colSpan={3}>Итого</TableCell>\r\n                            <TableCell align=\"right\">{props.total}</TableCell>\r\n                        </TableRow>\r\n\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <div className={s.constructor}>\r\n                <div className={s.changeName}>\r\n                    {props.editMode ? \"\" : <Button variant=\"outline-info\" onClick={() => {\r\n                        editModeOn(true)\r\n\r\n                    }}>Изменить название</Button>}\r\n                    {props.editMode\r\n                        ?\r\n                        <div>\r\n                            Введите новое название, затем нажмите\r\n                            \"Сохранить название\" рядом с элементом\r\n                            которому хотите изменить название: <input onChange={onEditName} ref={newEditNameElement}/>\r\n                            <br/>\r\n                            <Button size=\"sm\" variant=\"outline-info\" onClick={() => {\r\n                                editModeOn(false)\r\n                            }}> Отмена </Button>\r\n\r\n                        </div>\r\n                        : \"\"}\r\n                </div>\r\n                <div>\r\n                    {props.editModeName ? <div className={s.newElementInputs}>\r\n                        <div>\r\n                            <div>Введите название:</div>\r\n                            <div>Введите количество:</div>\r\n                            <div>Введите цену:</div>\r\n                        </div>\r\n                        <div>\r\n                            <input onChange={onNameChange} ref={newNameElement}/>\r\n                            <input onChange={onCountChange} ref={newCountElement}/>\r\n                            <input onChange={onPriceChange} ref={newPriceElement}/>\r\n\r\n                        </div>\r\n                    </div> : \"\"}\r\n                    <div>\r\n                        {props.editModeName ? <div>\r\n                                <Button className={s.addButton} size=\"sm\" variant=\"outline-success\" onClick={() => {\r\n                                    onAddItem()\r\n                                }}>Добавить</Button>\r\n                                <Button size=\"sm\" variant=\"outline-info\" onClick={() => {\r\n                                    props.setEditModeName(false)\r\n                                }}>Отмена</Button></div> :\r\n                            <Button variant=\"outline-info\" onClick={() => {\r\n                                props.setEditModeName(true)\r\n\r\n                            }}>Добавить товар</Button>}</div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    items: state.itemsPage.items,\r\n    newItemText: state.itemsPage.newItemText,\r\n    rows: state.itemsPage.rows,\r\n    newItemPrice: state.itemsPage.newItemPrice,\r\n    newItemName: state.itemsPage.newItemName,\r\n    newItemCount: state.itemsPage.newItemCount,\r\n    total: state.itemsPage.total,\r\n    editMode: state.itemsPage.editMode,\r\n    name: state.itemsPage.name,\r\n    editModeName: state.itemsPage.editModeName,\r\n\r\n\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        AddRowAction, updateNewName, updateNewCount,\r\n        updateNewPrice, updateTotal, deleteRow, setEditMode, editName, SaveEditName, addCount,\r\n        deleteCount, setEditModeName\r\n    })\r\n)(ItemsTable);\r\n\r\n\r\n","import './App.css';\nimport React from \"react\";\nimport ItemsTable from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className='mainStyle'>\n      <ItemsTable />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport itemsReducer from \"./items-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    itemsPage: itemsReducer,\r\n\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}